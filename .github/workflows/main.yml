# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Get version
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV &&
          echo "VERSION=$(cat version.txt)" >> $env:GITHUB_ENV
      
      - name: Add version
        run: |
          perl -i -pe's/VERSION/V${{ env.VERSION }}/g' gui_main.py
          perl -i -pe's/self.version: str = \"1.0\"/self.version = \"${{ env.VERSION }}\"/g' ceiba/ceiba.py
      
      - name: test
        run: cat ceiba/ceiba.py

      - name: Set up python version
        uses: actions/setup-python@v2
        if: ${{ matrix.os != 'macos-latest' }}
        with:
          python-version: '3.7'
      
      - name: Set up python version
        uses: actions/setup-python@v2
        if: ${{ matrix.os == 'macos-latest' }}
        with:
          python-version: '3.10'
          
      - name: Install modules
        run: pip3 install -r requirements.txt

      - name: Install PyInstaller
        run: pip3 install pyinstaller

      - name: Package Application
        run: pyinstaller ceiba-downloader.spec

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ceiba-downloader-${{ matrix.os }}
          path: dist/*
          retention-days: 1
  
  release:
    name: "Prelease"
    needs: build
    runs-on: ubuntu-latest
    steps:
      # We don't need the repo, grab all artifacts from the build stage
      # The plugin puts each artifact in a folder of `artifactname`
      - uses: actions/download-artifact@v2
      - name: Display fetched artifacts
        run: ls -R

      - name: Add execution permission
        run: |
          chmod +x ceiba-downloader-ubuntu-latest/ceiba-downloader/ceiba-downloader
          chmod +x ceiba-downloader-macos-latest/ceiba-downloader.app/Contents/MacOS/ceiba-downloader
      
      - name: Zip files
        run: |
          cd ceiba-downloader-windows-latest && zip -r ../ceiba-downloader-windows.zip ceiba-downloader && cd ..
          cd ceiba-downloader-macos-latest && zip -r ../ceiba-downloader-mac.zip ceiba-downloader.app && cd ..
          cd ceiba-downloader-ubuntu-latest && zip -r ../ceiba-downloader-linux.zip ceiba-downloader && cd ..

      - name: Emit a Github Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            ceiba-downloader*.zip